-----------------------------------------------------描述: 玩家合成网络消息处理及其逻辑--时间: 2012.3.26--作者: xxj---------------------------------------------------MsgCompose = {}local p = MsgCompose;p.mUIListener = nil;local EQUIP_UPSTEP     = 0;--升阶local EQUIP_CAST     = 1;--神铸local GEM_COMPOSE       = 2;--合成--合成function p.SendGenComposeAction(nItemId)    p.SendComposeAction(GEM_COMPOSE, nItemId, nItemId);end--神铸function p.SendGlidAction(formulaID, nItemId)    p.SendComposeAction(EQUIP_CAST, formulaID, nItemId);end--升阶function p.SendUpstepAction(formulaID, nItemId)    p.SendComposeAction(EQUIP_UPSTEP, formulaID, nItemId);endfunction p.SendComposeAction(action, formulaID, nItemId)     LogInfo("p.SendComposeAction:[%d]",action);    	local netdata = createNDTransData(NMSG_Type._MSG_START_FORMULA_DATA);	if nil == netdata then		LogInfo("发送物品消息失败,内存不够");		return false;	end        local btAction = EQUIP_UPSTEP;    netdata:WriteByte(action);	netdata:WriteInt(formulaID);	netdata:WriteInt(nItemId);	SendMsg(netdata);	netdata:Free();		ShowLoadBar();	return true;endfunction p.SendComposeGemAction(nItemId)     LogInfo("p.SendComposeGemAction:[%d]",nItemId);    if	not CheckN(nItemId) then		LogInfo("发送物品消息失败,参数不对");		return false;	end    	local netdata = createNDTransData(NMSG_Type._MSG_START_FORMULA_DATA);	if nil == netdata then		LogInfo("发送物品消息失败,内存不够");		return false;	end    local btAction = GEM_COMPOSE;    netdata:WriteByte(btAction);	netdata:WriteInt(formulaID);	netdata:WriteInt(nItemId);	SendMsg(netdata);	netdata:Free();		ShowLoadBar();	return true;end--发送神铸消息function p.SendGlidAction(formulaID,nWeaponItemId)       LogInfo("p.SendGlidAction:[%d]",formulaID);    if	not CheckN(formulaID) then		LogInfo("发送物品消息失败,参数不对");		return false;	end    	local netdata = createNDTransData(NMSG_Type._MSG_START_FORMULA_DATA);	if nil == netdata then		LogInfo("发送物品消息失败,内存不够");		return false;	end    local btAction = EQUIP_CAST;    netdata:WriteByte(btAction);	netdata:WriteInt(formulaID);	netdata:WriteInt(nWeaponItemId);	SendMsg(netdata);	netdata:Free();		ShowLoadBar();	return true;end-- 网络消息处理(合成信息)function p.ProcessComposeInfo(netdata)     LogInfo("p.ProcessComposeInfo");    CloseLoadBar();  	  	local nAction      = netdata:ReadByte();	if nAction == EQUIP_UPSTEP then		local nProductType =  netdata:ReadInt(); 		if nProductType >= 0 then			 PlayerEquipUpStepUI.SuccGetProduct(nProductType)		end	elseif 	nAction == EQUIP_CAST then		local nProductType =  netdata:ReadInt(); 		if nProductType >= 0 then			 PlayerEquipGlidUI.SuccGetProduct(nProductType)		end		end        if (p.mUIListener) then		p.mUIListener( NMSG_Type._MSG_START_FORMULA_DATA, nAction);    endend--嵌入function p.embedGem(nEquipId, nGemId)    p.SendGemAction(0, nEquipId, nGemId);end--取出function p.unEmbedGem(nEquipId, nGemId)    p.SendGemAction(2,nEquipId, nGemId);end--卸下全部宝石function p.unAllEmbedGem(nEquipId)    p.SendGemAction(5,nEquipId, 0);end--開洞function p.OpenHole(nEquipId, nOpenIndex)	--nOpenIndex開第幾個洞    p.SendGemAction(6, nEquipId, nOpenIndex);end--宝石嵌取function p.SendGemAction(nAction, nEquipId, nGemId)	local netdata = createNDTransData(NMSG_Type._MSG_STONE);	if nil == netdata then		LogInfo("发送物品消息失败,内存不够");		return false;	end	netdata:WriteByte(nAction);	netdata:WriteInt(nEquipId);	netdata:WriteInt(nGemId);	SendMsg(netdata);	netdata:Free();			LogInfo("send nAction[%d] nEquipId[%d] nGemId[%d]", nAction,nEquipId,nGemId);    ShowLoadBar();    	return true;endfunction p.RevReceiveGemActionResult(netdata)    CloseLoadBar();        local nAction = netdata:ReadByte();	local nEquipId = netdata:ReadInt();	local nGemId = netdata:ReadInt();    local m = {};    m.Action    = nAction;    m.EquipId   = nEquipId;    m.GemId     = nGemId;        --開洞數據更新    if nAction == 6 then		if m.GemId  == 1 then		   Item.SetItemInfoN(nEquipId, Item.ITEM_HOLE_OPEN_FLAG, 1);		elseif m.GemId  == 2 then			Item.SetItemInfoN(nEquipId, Item.ITEM_HOLE_OPEN_FLAG, 3);		end    end        if (p.mUIListener) then		p.mUIListener( NMSG_Type._MSG_STONE, m);    endendRegisterNetMsgHandler(NMSG_Type._MSG_START_FORMULA_DATA, "p.ProcessComposeInfo", p.ProcessComposeInfo);RegisterNetMsgHandler(NMSG_Type._MSG_STONE, "p.RevReceiveGemActionResult", p.RevReceiveGemActionResult);